{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Smusdi","text":""},{"location":"#welcome-to-smusdi","title":"Welcome to Smusdi","text":"<p>The Smusdi project provides a set of .NET libraries used to help developing and testing C# services by avoiding boilerplate code.</p>"},{"location":"#creating-a-web-api-with-smusdi","title":"Creating a WEB API with Smusdi","text":"<ul> <li> <p>Create project:     </p><pre><code>mkdir smusdi-webapi\ncd smusdi-webapi/\ndotnet new console --name smusdi-webapi\ndotnet add smusdi-webapi/smusdi-webapi.csproj package Smusdi.Core \n</code></pre><p></p> </li> <li> <p>Update Program.cs:     </p><pre><code>using Smusdi.Core;\n\nSmusdiService.InitAndRun(args);\n</code></pre><p></p> </li> <li> <p>Run project:     </p><pre><code>dotnet run --project smusdi-webapi/smusdi-webapi.csproj\n</code></pre><p></p> </li> <li> <p>Open swagger ui to check that it works:</p> </li> </ul> <p></p>"},{"location":"api-versioning/","title":"API versioning","text":""},{"location":"api-versioning/#api-versioning","title":"API versioning","text":"<p>The versioning of the API is managed with the package aspnet-api-versioning.</p> <p>Note</p> <p>If the service does not use api versioning, the configuration parameter noVersioning in appsettings file must be set to false.</p> <pre><code>{\n    \"smusdi\":{\n        \"noVersioning\": false\n    }\n}\n</code></pre> <p>A versioned controller must be tagged as follows:</p> <pre><code>[ApiController]\n[ApiVersion(1.0)]\n[Route(\"v{version:apiVersion}/sample\")]\npublic class SampleController : ControllerBase\n{\n    ...\n}\n</code></pre>"},{"location":"swagger/","title":"Swagger settings","text":""},{"location":"swagger/#swagger-settings","title":"Swagger settings","text":"<p>The swagger ui can be found at http:///swagger/index.html.</p> <p>The swagger ui can be configured in the appsettings file: </p><pre><code>{\n    \"swagger\": {\n        \"Title\": \"%SMUSDI_SERVICE_NAME%\",\n        \"description\": \"%SMUSDI_SERVICE_NAME%\",\n        \"contactName\": \"TO_BE_SET\",\n        \"contactMail\": \"TO_BE_SET\",\n        \"reverseProxyBasePath\": \"api/smusdi-sample\"\n    }\n}\n</code></pre><p></p> Parameter Description Default Value title Title of the application Name of the service description Description of the application Name of the service contactName Support contact name TO_BE_SET contactMail Support contact email TO_BE_SET reverseProxyBasePath Use to properly setup the server path in case the service is behind a reverse proxy"},{"location":"webapi-config/","title":"Smusdi WEB API configuration","text":""},{"location":"webapi-config/#smusdi-web-api-configuration","title":"Smusdi WEB API configuration","text":"<p>Note</p> <p>3 environment variables are used to setup the application configuration:</p> <ul> <li>ASPNETCORE_ENVIRONMENT</li> <li>SMUSDI_APPSETTINGS_FOLDER</li> <li>SMUSDI_SERVICE_NAME</li> </ul>"},{"location":"webapi-config/#implementation-overview","title":"Implementation overview","text":"<p>The Smusdi service adds some configuration providers to the default ones and update the default json files configuration providers.</p> <pre><code>var webApplicationOptions = new WebApplicationOptions\n        {\n            Args = args,\n        };\n\nvar builder = WebApplication.CreateBuilder(webApplicationOptions)\n    .InitConfiguration();\n</code></pre> <p>And the InitConfiguration extension method: </p><pre><code>using Smusdi.Extensibility;\n\nnamespace Smusdi.Core.Configuration;\n\npublic static class ConfigurationBuilding\n{\n    public static WebApplicationBuilder InitConfiguration(this WebApplicationBuilder webApplicationBuilder, string[]? args)\n    {\n        webApplicationBuilder.Configuration.InitConfiguration(webApplicationBuilder.Environment.EnvironmentName, args);\n        return webApplicationBuilder;\n    }\n\n    public static HostApplicationBuilder InitConfiguration(this HostApplicationBuilder hostApplicationBuilder, string[]? args)\n    {\n        hostApplicationBuilder.Configuration.InitConfiguration(hostApplicationBuilder.Environment.EnvironmentName, args);\n        return hostApplicationBuilder;\n    }\n\n    public static void InitConfiguration(this ConfigurationManager configuration, string environmentName, string[]? args)\n    {\n        // Cleanup already registered file config sources as the reset of the base path does not affect the sources, the associated provider is not reset!\n        foreach (var fileSource in configuration.Sources.OfType&lt;FileConfigurationSource&gt;())\n        {\n            fileSource.FileProvider = null;\n        }\n\n        configuration.SetBasePath(GetConfigFilesFolder());\n\n        var serviceName = Environment.GetEnvironmentVariable(SmusdiConstants.SmusdiServiceNameEnvVar);\n        if (!string.IsNullOrWhiteSpace(serviceName))\n        {\n            configuration\n                .AddJsonFile($\"appsettings.{serviceName}.json\", true, true)\n                .AddJsonFile($\"appsettings.{serviceName}.{environmentName}.json\", true, true);\n        }\n\n        if (args is { Length: &gt; 0 })\n        {\n            // already done during default construction. But, the previous files may have overwritten these values.\n            configuration.AddCommandLine(args);\n        }\n\n        configuration\n            .EnableEnvironmentVariablesExpansion();\n    }\n\n    public static string GetConfigFilesFolder()\n    {\n        var basePath = Environment.ExpandEnvironmentVariables(Environment.GetEnvironmentVariable(SmusdiConstants.SmusdiAppsettingsFolderEnvVar) ?? string.Empty);\n        return Directory.Exists(basePath) ? Path.GetFullPath(basePath) : Directory.GetCurrentDirectory();\n    }\n}\n</code></pre><p></p> <p>So, currently:</p> <ul> <li>The base path of the json appsettings file is set to the value of the SMUSDI_APPSETTINGS_FOLDER environment variable if the target folder exists;</li> <li> <p>Two appsettings files are added to the list of the configuration providers:</p> <ul> <li>appsettings.%SMUSDI_SERVICE_NAME%.json</li> <li>appsettings.%SMUSDI_SERVICE_NAME%_%ASPNETCORE_ENVIRONMENT%.json</li> </ul> </li> </ul> <p>The appsetting.json and appsettings/%ASPNETCORE_ENVIRONMENT%.json are shared by a list of services and define common settings. The two added ones contain only settings associated to the current service.</p> <ul> <li>The environment variables founded in the configuration properties are expanded by the provider added by the call to EnableEnvironmentVariablesExpansion().</li> </ul>"},{"location":"webapi-config/#specs","title":"Specs","text":"<pre><code>Feature: Application settings folder selection\n\nThe application must load appsettings file either from local folder, or from folder defined by the environment variable\nSMUSDI_APPSETTINGS_FOLDER.\n\nBackground:\n    Given the configuration in current folder\n        \"\"\"\n        {\n            \"folder\": \"current\"\n        }\n        \"\"\"\n    And the configuration in folder 'sub-folder'\n        \"\"\"\n        {\n            \"folder\": \"sub-folder\"\n        }\n        \"\"\"\n\nScenario: Starting the service with variable SMUSDI_APPSETTINGS_FOLDER not set\n    Given the service initialized\n    When I start the service\n    Then the read folder parameter is \"current\"\n\nScenario: Starting the service with variable SMUSDI_APPSETTINGS_FOLDER set to sub-folder\n    Given the environment variable \"SMUSDI_APPSETTINGS_FOLDER\" set to \"sub-folder\"\n    And the service initialized\n    When I start the service\n    Then the read folder parameter is \"sub-folder\"\n</code></pre> <pre><code>Feature: Specific appsettings file\n\nWhen a setting is overridden in the appsettings file specific to the current service, this value must be used instead of the\none defined in the shared file.\n\nScenario: Starting service with a setting overridden in the specific appsettings file\n    Given the environment variable \"SMUSDI_SERVICE_NAME\" set to \"myservice\"\n    And the configuration in current folder\n        \"\"\"\n        {\n            \"folder\": \"current\"\n        }\n        \"\"\"\n    And the configuration file \"appsettings.myservice.json\"\n        \"\"\"\n        {\n            \"folder\": \"anotherone\"\n        }\n        \"\"\"\n    And the service initialized\n    When I start the service\n    Then the read folder parameter is \"anotherone\"\n</code></pre> <pre><code>Feature: Environment variables expansion in configuration settings\n\nWhen a property uses an environement variable, the variable must be expanded before being sent to the application.\n\nScenario: Starting service with an property in appsettings.json using an environment variable\n    Given the configuration in current folder\n        \"\"\"\n        {\n            \"serviceUrl\": \"http://%TARGET_SERVER%:%TARGET_PORT%\"\n        }\n        \"\"\"\n    And the environment variable \"TARGET_SERVER\" set to \"myserver.fr.world\"\n    And the environment variable \"TARGET_PORT\" set to \"23457\"\n    And the service initialized\n    When I start the service\n    Then the value of the config property \"serviceUrl\" is \"http://myserver.fr.world:23457\"\n\nScenario Outline: Property containing an environement variable that references an environement variable\n    Given the configuration in current folder\n        \"\"\"\n        {\n            \"serviceUrl\": \"http://%TARGET_SERVER%:%TARGET_PORT%\"\n        }\n        \"\"\"\n    And the environment variable \"ENV\" set to \"int\"\n    And the environment variable \"SMUSDI_EXPAND_ENV_TWICE\" set to \"&lt;SMUSDI_EXPAND_ENV_TWICE&gt;\"\n    And the environment variable \"TARGET_SERVER\" set to \"myserver.%ENV%.fr.world\"\n    And the environment variable \"TARGET_PORT\" set to \"23457\"\n    And the service initialized\n    When I start the service\n    Then the value of the config property \"serviceUrl\" is \"&lt;SERVICE_URL&gt;\"\n\n    Examples: \n        | SMUSDI_EXPAND_ENV_TWICE | SERVICE_URL                          |\n        |                         | http://myserver.%ENV%.fr.world:23457 |\n        | dd                      | http://myserver.%ENV%.fr.world:23457 |\n        | True                    | http://myserver.int.fr.world:23457   |\n        | False                   | http://myserver.%ENV%.fr.world:23457 |\n</code></pre>"},{"location":"testing/configuration/","title":"Configuration parameters / appsettings","text":""},{"location":"testing/configuration/#configuration-parameters-appsettings","title":"Configuration parameters / appsettings","text":"<p>Configuration parameters from appsettings could be overridden for scenarios without any modification in the appsettings file.</p>"},{"location":"testing/configuration/#override-with-the-reqnroll-step","title":"Override with the reqnroll step","text":"<pre><code>Feature: Overriding service settings from command line\n\nFor some tests, it is very usefull to override a configuration parameter defined in specific appsettting file without having to use a dedicated file \nor environment variable.\n\nWith appsettings.json containing:\n\n{\n  \"specificSection\": {\n    \"rootFolder\": \"folders/root\"\n  }\n}\n\n\nScenario: Override configuration parameters by passing value as command line argument\n    Given the command line arguments\n        | Field                      | Value          |\n        | specificSection:rootFolder | my-root-folder |\n    And the service initialized\n    When I start the service\n    Then the configuration property \"rootFolder\" of the section \"specificSection\" is equal to \"my-root-folder\"\n\nScenario: No override of the configuration parameter\n    Given the service initialized\n    When I start the service\n    Then the configuration property \"rootFolder\" of the section \"specificSection\" is equal to \"folders/root\"\n</code></pre>"},{"location":"testing/configuration/#override-with-tags","title":"Override with tags","text":"<pre><code>@arg:specificSection:rootFolder=my-root-folder\nFeature: Using tags to setup command line arguments\n\nScenario: Tag set on feature\n    Given the service initialized\n    When I start the service\n    Then the configuration property \"rootFolder\" of the section \"specificSection\" is equal to \"my-root-folder\"\n\n@arg:specificSection:rootFolder=my-local-folder @arg:custom:data=123=kt\nScenario: Tag set on scenario\n    Given the service initialized\n    When I start the service\n    Then the configuration property \"rootFolder\" of the section \"specificSection\" is equal to \"my-local-folder\"\n    And the configuration property \"data\" of the section \"custom\" is equal to \"123=kt\"\n</code></pre>"},{"location":"testing/overview/","title":"Testing services","text":""},{"location":"testing/overview/#testing-services","title":"Testing services","text":""},{"location":"testing/overview/#dependencies","title":"Dependencies","text":"<p>The tests and the testing helpers are using:</p> <ul> <li>reqnroll</li> <li>Awesome assertions</li> </ul>"},{"location":"testing/overview/#integration-tests","title":"Integration tests","text":"<p>For integration tests, the class Smusdi.Testing.SmusdiTestingService instanciates the Smusdi.Core.SmusdiService with Microsoft.AspNetCore.TestHost.TestServer instead of normal host.</p> <p>The variable ASPNETCORE_ENVIRONMENT used to select the appsettings files to use is set to reqnrol before the initialization of the service.</p> <p>The following tags can be used:</p> <ul> <li> <p>postgresql: </p> <ul> <li>a postgresql database is created with a random name;</li> <li>the connection string is updated to match this database;</li> <li>the method is registered with a hook order of HookAttribute.DefaultOrder - 1000.</li> </ul> </li> <li> <p>integration</p> <ul> <li>the service is initialized and started;</li> <li>the method is registered with a hook order of HookAttribute.DefaultOrder - 500.</li> </ul> </li> </ul>"}]}